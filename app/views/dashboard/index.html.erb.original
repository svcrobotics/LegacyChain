<div class="min-h-screen bg-gradient-to-b from-gray-100 via-white to-gray-100 font-sans flex flex-col items-center py-12">
  <div class="w-full max-w-5xl bg-white rounded-xl shadow-lg p-8">
    <h1 class="text-4xl font-extrabold text-indigo-700 text-center mb-8">👛 Mon Portefeuille Ethereum</h1>
    <br>
    <!-- Adresse -->
    <div class="mb-6 text-center">
      <h2 class="text-sm uppercase text-gray-500">Adresse connectée</h2>
      <p id="wallet" class="text-lg font-mono text-indigo-600 break-all">...</p>
    </div>

    <!-- Soldes -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div class="bg-indigo-50 p-6 rounded-lg shadow border border-indigo-200">
        <h3 class="text-sm text-indigo-700 uppercase font-bold mb-2">Solde Sepolia</h3>
        <p id="sepoliaBalance" class="text-2xl font-bold text-indigo-900">...</p>
      </div>
      <div class="mt-12">
        <h3 class="text-xl font-semibold text-gray-700 mb-4 text-center">🧪 Évolution Sepolia (7 jours)</h3>
        <canvas id="sepoliaChart" class="w-full max-w-3xl mx-auto bg-white rounded-lg shadow p-4"></canvas>
      </div>
      <div class="bg-green-50 p-6 rounded-lg shadow border border-green-200">
        <h3 class="text-sm text-green-700 uppercase font-bold mb-2">Solde Mainnet</h3>
        <p id="mainnetBalance" class="text-2xl font-bold text-green-900">...</p>
        <p id="mainnetChange" class="text-sm text-gray-500 mt-1">...</p>
      </div>
      <!-- Graphiques -->
      <div class="mt-12">
        <h3 class="text-xl font-semibold text-gray-700 mb-4 text-center">📈 Évolution Mainnet (7 jours)</h3>
        <canvas id="mainnetChart" class="w-full max-w-3xl mx-auto bg-white rounded-lg shadow p-4"></canvas>
      </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>

<script>
  const address = new URLSearchParams(window.location.search).get("address");

  function getLast7Days() {
    const today = new Date();
    return [...Array(7)].map((_, i) => {
      const d = new Date(today);
      d.setDate(today.getDate() - (6 - i));
      return d.toISOString().split("T")[0];
    });
  }

  function processTransactions(txs, address) {
    const balances = {};
    let running = 0;
    txs.forEach(tx => {
      const date = new Date(tx.timeStamp * 1000).toISOString().split('T')[0];
      const value = Number(tx.value) / 1e18;
      const isIncoming = tx.to.toLowerCase() === address.toLowerCase();
      running += isIncoming ? value : -value;
      balances[date] = running;
    });

    const days = getLast7Days();
    let last = 0;
    const data = days.map(day => {
      if (balances[day] !== undefined) last = balances[day];
      return last.toFixed(6);
    });

    return { labels: days, data };
  }

  async function loadChart(canvasId, label, color, txs) {
    const { labels, data } = processTransactions(txs, address);
    const ctx = document.getElementById(canvasId).getContext("2d");
    new Chart(ctx, {
      type: "line",
      data: {
        labels,
        datasets: [{
          label,
          data,
          borderColor: color,
          backgroundColor: color + "33",
          fill: true,
          tension: 0.3
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            ticks: {
              callback: val => val + " ETH"
            }
          }
        }
      }
    });
  }

  document.addEventListener("DOMContentLoaded", async () => {
    document.getElementById("wallet").textContent = address;


    let ethToEur = 0;
    try {
      const priceResp = await fetch("https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=eur");
      const priceData = await priceResp.json();
      ethToEur = priceData.ethereum.eur;
    } catch {
      console.warn("⚠️ Impossible de récupérer le taux ETH -> EUR.");
    }

    // Solde Sepolia
    try {
      const res = await fetch(`https://api-sepolia.etherscan.io/api?module=account&action=balance&address=${address}&tag=latest&apikey=T7TBWAJUSQZIZG5A3FT67JU9IRIA913VSY`);
      const json = await res.json();
      const ethBalance = Number(json.result) / 1e18;
      document.getElementById("sepoliaBalance").textContent = `${ethBalance.toFixed(4)} ETH (${(ethBalance * ethToEur).toFixed(2)} €)`;

    } catch {
      document.getElementById("sepoliaBalance").textContent = "❌ Erreur Sepolia";
    }

    // Solde Mainnet
    try {
      const provider = new ethers.providers.JsonRpcProvider("https://eth-mainnet.g.alchemy.com/v2/dpto4kpk6GC3rBIJakWcV");
      const balance = await provider.getBalance(address); 
      const ethMainnet = ethers.utils.formatEther(balance);
      document.getElementById("mainnetBalance").textContent = `${Number(ethMainnet).toFixed(4)} ETH (${(ethMainnet * ethToEur).toFixed(2)} €)`;

    } catch {
      document.getElementById("mainnetBalance").textContent = "❌ Erreur Mainnet";
    }

    // Transactions Sepolia
    try {
      const txs = await fetch(`https://api-sepolia.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&sort=asc&apikey=T7TBWAJUSQZIZG5A3FT67JU9IRIA913VSY`).then(r => r.json());
      if (txs.status === "1") {
        loadChart("sepoliaChart", "Évolution Sepolia (ETH)", "#6366F1", txs.result);
      }
    } catch {
      console.error("Erreur chargement graphique Sepolia");
    }

    // Transactions Mainnet
    try {
      const txs = await fetch(`https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&sort=asc&apikey=T7TBWAJUSQZIZG5A3FT67JU9IRIA913VSY`).then(r => r.json());
      if (txs.status === "1") {
        loadChart("mainnetChart", "Évolution Mainnet (ETH)", "#10B981", txs.result);
      }
    } catch {
      console.error("Erreur chargement graphique Mainnet");
    }
  });
</script>


<script>
  document.addEventListener("DOMContentLoaded", async function () {
    const address = new URLSearchParams(window.location.search).get("address");
    const alchemyApiKey = "dpto4kpk6GC3rBIJakWcV"; // ✅ Remplace par le tien si besoin
    const alchemyBase = `https://eth-mainnet.g.alchemy.com/v2/${alchemyApiKey}`;

    // ⚡️ Prix ETH/EUR actuel
    const ethToEur = await fetch("https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=eur")
      .then(r => r.json())
      .then(d => d.ethereum.eur);

    try {
      // 🔹 Provider ETH Mainnet
      const provider = new ethers.providers.JsonRpcProvider(`${alchemyBase}`);

      // 🔹 Solde actuel
      const currentBalanceWei = await provider.getBalance(address);
      const currentBalanceEth = parseFloat(ethers.utils.formatEther(currentBalanceWei));

      // 🔹 Récupérer le block d’il y a 24h
      const now = Math.floor(Date.now() / 1000);
      const yesterday = now - 86400;

      const blockRes = await fetch(`${alchemyBase}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id: 1,
          jsonrpc: "2.0",
          method: "alchemy_getBlockByTime",
          params: [yesterday.toString(), "before"]
        })
      });
      const blockData = await blockRes.json();
      const blockNumber = blockData.result.number;

      // 🔹 Solde il y a 24h
      const balance24hWei = await provider.getBalance(address, blockNumber);
      const balance24hEth = parseFloat(ethers.utils.formatEther(balance24hWei));

      // 🔹 Calcul des différences
      const diffEth = currentBalanceEth - balance24hEth;
      const diffEur = diffEth * ethToEur;
      const percent = (diffEth / balance24hEth) * 100;

      // 🔹 Affichage
      document.getElementById("mainnetBalance").textContent =
        `${currentBalanceEth.toFixed(4)} ETH (€${(currentBalanceEth * ethToEur).toFixed(2)})`;

      document.getElementById("mainnetChange").textContent =
        `${diffEth >= 0 ? '+' : '-'}€${Math.abs(diffEur).toFixed(2)} (${diffEth >= 0 ? '+' : '-'}${Math.abs(percent).toFixed(2)}%)`;

    } catch (e) {
      console.error("Erreur récupération solde mainnet", e);
      document.getElementById("mainnetBalance").textContent = "❌ Erreur Mainnet";
      document.getElementById("mainnetChange").textContent = "";
    }
  });
</script>
