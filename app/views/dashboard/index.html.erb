<!-- Dashboard portefeuille Ethereum sans graphique -->
<div class="min-h-screen bg-gray-100 text-gray-900 font-sans flex flex-col items-center py-12 px-4">
  <div class="w-full max-w-5xl bg-white rounded-2xl shadow-xl p-8">
    <h1 class="text-4xl font-extrabold text-violet-600 text-center mb-8">👛 Dashboard</h1>

    <!-- Adresse -->
    <div class="mb-6 text-center">
      <p id="wallet" class="text-lg font-bold break-all text-green-600">...</p>
    </div>

    <!-- Solde Mainnet -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div class="bg-gray-50 p-6 rounded-lg shadow border border-green-200 w-full md:col-span-2">
        <h3 class="text-sm text-green-600 uppercase font-bold mb-2">Solde Mainnet</h3>
        <p id="mainnetBalance" class="text-2xl font-bold text-gray-900">...</p>
        <p id="mainnetChange" class="text-sm text-gray-600 mt-1">...</p>
      </div>
    </div>
  </div>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
<script>
  const address = new URLSearchParams(window.location.search).get("address");

  document.addEventListener("DOMContentLoaded", async () => {
    document.getElementById("wallet").textContent = address;

    let ethToEur = 0;
    try {
      const priceResp = await fetch("https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=eur");
      const priceData = await priceResp.json();
      ethToEur = priceData.ethereum.eur;
    } catch {
      console.warn("⚠️ Impossible de récupérer le taux ETH → EUR.");
    }

    try {
      const provider = new ethers.providers.JsonRpcProvider("https://eth-mainnet.g.alchemy.com/v2/dpto4kpk6GC3rBIJakWcV");
      const balance = await provider.getBalance(address);
      const ethMainnet = Number(ethers.utils.formatEther(balance));
      const eurMainnet = ethMainnet * ethToEur;
      document.getElementById("mainnetBalance").textContent = `${ethMainnet.toFixed(4)} ETH (${eurMainnet.toFixed(2)} €)`;

      const txResp = await fetch(`https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&sort=asc&apikey=T7TBWAJUSQZIZG5A3FT67JU9IRIA913VSY`);
      const txData = await txResp.json();

      if (txData.status === "1") {
        const incomingTx = txData.result.find(tx => tx.to.toLowerCase() === address.toLowerCase());
        if (!incomingTx) {
          document.getElementById("mainnetChange").textContent = "❌ Aucune transaction entrante trouvée";
          return;
        }

        const timestamp = Number(incomingTx.timeStamp);
        const date = new Date(timestamp * 1000);
        const dateStr = `${String(date.getDate()).padStart(2, '0')}-${String(date.getMonth()+1).padStart(2, '0')}-${date.getFullYear()}`;

        let historicEur = 0;
        try {
          const priceResp = await fetch(`https://api.coingecko.com/api/v3/coins/ethereum/history?date=${dateStr}&localization=false`);
          const priceData = await priceResp.json();
          historicEur = priceData?.market_data?.current_price?.eur;
        } catch (err) {
          console.warn("⚠️ Erreur prix historique ETH :", err);
        }

        if (!historicEur) {
          document.getElementById("mainnetChange").textContent = "⚠️ Prix ETH historique indisponible";
          return;
        }

        const receivedEth = Number(incomingTx.value) / 1e18;
        const valueAtPurchase = receivedEth * historicEur;
        const valueNow = receivedEth * ethToEur;
        const diffEur = valueNow - valueAtPurchase;
        const percent = (diffEur / valueAtPurchase) * 100;

        const sign = diffEur >= 0 ? "+" : "−";
        const arrow = diffEur > 0 ? "⬆️" : diffEur < 0 ? "⬇️" : "";

        document.getElementById("mainnetChange").textContent =
          `${arrow} ${sign}${Math.abs(diffEur).toFixed(2)} € (${sign}${Math.abs(percent).toFixed(2)}%) depuis l'achat le ${dateStr}`;
      }
    } catch (err) {
      console.error("❌ Erreur Mainnet:", err);
      document.getElementById("mainnetBalance").textContent = "❌ Erreur Mainnet";
    }
  });
</script>
